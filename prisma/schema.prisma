datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    directUrl  = env("DIRECT_URL")
    extensions = [postgis(version: "3.1.4")]
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

model user {
    id                String              @id @default(cuid())
    email             String              @unique
    name              String?
    avatar            String?
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    organization      organization?       @relation(fields: [organizationId], references: [id])
    organizationId    String?
    city              city?               @relation(fields: [cityId], references: [id])
    cityId            String?
    credits           Int                 @default(0)
    jobPostTokenUsage jobPostTokenUsage[]
    creditPurchase    creditPurchase[]
    creditUsage       creditUsage[]
    promoCodeUsage    promoCodeUsage[]
}

model organization {
    id          String                    @id @default(cuid())
    name        String
    createdAt   DateTime                  @default(now())
    updatedAt   DateTime                  @updatedAt
    jobPosts    jobPost[]
    linkedin    String?
    twitter     String?
    facebook    String?
    github      String?
    instagram   String?
    image       String?
    website     String?
    description String?
    contact     String?
    address     String?
    zip         String?
    location    Unsupported("geography")?
    city        city?                     @relation(fields: [cityId], references: [id])
    cityId      String?
    state       String?
    users       user[]
}

model jobPost {
    id                String                    @id @default(cuid())
    published         DateTime?                 @default(now())
    title             String?
    description       String?
    source            String
    createdAt         DateTime                  @default(now())
    updatedAt         DateTime                  @updatedAt
    minSalary         Int?
    maxSalary         Int?
    type              String?
    experience        String?
    seniority         Float?
    remote            Boolean?
    organization      organization?             @relation(fields: [organizationId], references: [id])
    organizationId    String?
    packages          jobPostToPackageVersion[]
    questions         jobPostQuestion[]
    tags              jobPostToTag[]
    openSource        Boolean                   @default(false)
    views             Int                       @default(0)
    hybrid            Boolean                   @default(false)
    consulting        Boolean                   @default(false)
    ratings           jobPostRatings[]
    tone              String?
    additionalInfo    String?
    applicationUrl    String?
    equity            Boolean                   @default(false)
    currencyId        String?
    currency          currency?                 @relation(fields: [currencyId], references: [id])
    slug              String                    @unique
    jobPostTokenUsage jobPostTokenUsage[]
    creditUsage       creditUsage[]
}

model jobPostTokenUsage {
    id         String   @id @default(cuid())
    jobPost    jobPost  @relation(fields: [jobPostId], references: [id])
    jobPostId  String
    userId     String
    user       user     @relation(fields: [userId], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    tokensUsed Int      @default(0)
}

model jobPostRatings {
    id        String   @id @default(cuid())
    jobPost   jobPost  @relation(fields: [jobPostId], references: [id])
    jobPostId String
    question  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    rating    Int?
}

model jobPostToPackageVersion {
    jobPost          jobPost                  @relation(fields: [jobPostId], references: [id])
    jobPostId        String
    packageVersion   openSourcePackageVersion @relation(fields: [packageVersionId], references: [id])
    packageVersionId String

    @@id([jobPostId, packageVersionId])
    @@index([jobPostId])
    @@index([packageVersionId])
}

model openSourcePackage {
    id          String                     @id @default(cuid())
    name        String                     @unique
    gitUrl      String?
    website     String?
    description String?
    logo        String?
    createdAt   DateTime                   @default(now())
    updatedAt   DateTime                   @updatedAt
    versions    openSourcePackageVersion[]
}

model openSourcePackageVersion {
    id        String                    @id @default(cuid())
    version   String
    package   openSourcePackage         @relation(fields: [packageId], references: [id])
    packageId String
    jobPosts  jobPostToPackageVersion[]
    createdAt DateTime                  @default(now())

    @@unique([packageId, version])
}

model jobPostQuestion {
    id        String   @id @default(cuid())
    jobPostId String
    question  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    answer    String?
    jobPost   jobPost  @relation(fields: [jobPostId], references: [id])
}

model jobPostTag {
    id        String         @id @default(cuid())
    tag       String         @unique
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    jobPosts  jobPostToTag[]
    default   Boolean        @default(false)
}

model jobPostToTag {
    jobPost   jobPost    @relation(fields: [jobPostId], references: [id])
    jobPostId String
    tag       jobPostTag @relation(fields: [tagId], references: [id])
    tagId     String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt

    @@id([jobPostId, tagId])
    @@index([jobPostId])
    @@index([tagId])
}

model postViews {
    id        String @id @default(cuid())
    jobPostId String
    views     Int    @default(0)
}

// GEO -----

model city {
    id            String                    @id @default(cuid())
    name          String
    countryId     String
    createdAt     DateTime                  @default(now())
    updatedAt     DateTime                  @updatedAt
    raw           String
    population    Int?
    location      Unsupported("geography")?
    country       country                   @relation(fields: [countryId], references: [id])
    user          user[]
    organizations organization[]

    @@unique([name, countryId])
}

model country {
    id            String             @id @default(cuid())
    name          String
    nativeName    String
    continentCode String
    capital       String
    a2            String             @unique
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt
    city          city[]
    continent     continent          @relation(fields: [continentCode], references: [code])
    currencies    countryCurrency[]
    languages     countryLanguage[]
    phoneCodes    countryPhoneCode[]
}

model countryPhoneCode {
    id        String  @id @default(cuid())
    code      Int
    countryId String
    country   country @relation(fields: [countryId], references: [id])

    @@unique([code, countryId])
}

model currency {
    id        String            @id @default(cuid())
    code      String            @unique
    countries countryCurrency[]
    jobPost   jobPost[]
}

model countryCurrency {
    countryId    String
    currencyCode String
    country      country  @relation(fields: [countryId], references: [id])
    currency     currency @relation(fields: [currencyCode], references: [code])

    @@id([countryId, currencyCode])
}

model language {
    id        String            @id @default(cuid())
    code      String            @unique
    countries countryLanguage[]
}

model countryLanguage {
    countryId    String
    languageCode String
    country      country  @relation(fields: [countryId], references: [id])
    language     language @relation(fields: [languageCode], references: [code])

    @@id([countryId, languageCode])
}

model continent {
    id        String    @id @default(cuid())
    name      String
    code      String    @unique
    countries country[]
}

model creditPurchase {
    id               String         @id @default(cuid())
    userId           String
    user             user           @relation(fields: [userId], references: [id])
    stripePurchaseId String         @unique
    creditsBought    Int
    createdAt        DateTime       @default(now())
    promoCodeId      String?
    promoCode        promoCode?     @relation(fields: [promoCodeId], references: [id])
    creditPackage    creditPackage? @relation(fields: [creditPackageId], references: [id])
    creditPackageId  String?
}

model creditUsage {
    id          String   @id @default(cuid())
    userId      String
    user        user     @relation(fields: [userId], references: [id])
    jobPostId   String
    jobPost     jobPost  @relation(fields: [jobPostId], references: [id])
    creditsUsed Int      @default(1)
    createdAt   DateTime @default(now())
}

model promoCode {
    id             String           @id @default(cuid())
    code           String           @unique
    credits        Int
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    expiresAt      DateTime?        @default(dbgenerated("(NOW() + '30 days'::interval)"))
    oneTime        Boolean          @default(false)
    promoCodeUsage promoCodeUsage[]
    creditPurchase creditPurchase[]
}

model promoCodeUsage {
    id          String    @id @default(cuid())
    promoCodeId String
    promoCode   promoCode @relation(fields: [promoCodeId], references: [id])
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    userId      String
    user        user      @relation(fields: [userId], references: [id])
}

model creditPackage {
    id             String           @id @default(cuid())
    credits        Int
    stripeId       String           @unique
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    creditPurchase creditPurchase[]
}

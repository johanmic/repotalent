"use server"
// import { App, Octokit } from "octokit"
import { Octokit } from "@octokit/rest"
import { createClient } from "@/utils/supabase/server"
import { redirect } from "next/navigation"
const GITHUB_APP_ID = process.env.GITHUB_APP_ID as string
console.log("GITHUB_APP_ID", GITHUB_APP_ID)
console.log("GITHUB_CLIENT_SECRET", process.env.GITHUB_CLIENT_SECRET)
const app = new App({
  appId: process.env.GITHUB_APP_ID as string,
  privateKey: process.env.GITHUB_PRIVATE_KEY as string,
  oauth: {
    clientId: process.env.GITHUB_CLIENT_ID as string,
    clientSecret: process.env.GITHUB_CLIENT_SECRET as string,
  },
})

export interface GithubOrg {
  login: string
  id: number
  name?: string
  description: string | null
  avatar_url: string
  location?: string | null
  url: string
}

const refreshGithubToken = async () => {
  const supabase = await createClient()
  const { data: sessionData, error } = await supabase.auth.getSession()
  if (!sessionData || error) {
    return null
  }
  const hasGithub = sessionData?.session?.user?.identities?.some(
    (identity) => identity.provider === "github"
  )
  if (!hasGithub) {
    return null
  }
  return sessionData.session?.provider_token
}
export const getGithubToken = async () => {
  const supabase = await createClient()
  const { data: sessionData, error } = await supabase.auth.getSession()
  if (!sessionData || error) {
    return null
  }
  console.log("sessionData", sessionData.session?.user)
  const hasGithub = sessionData?.session?.user?.identities?.some(
    (identity) => identity.provider === "github"
  )
  if (!hasGithub) {
    console.log("no github")
    return null
  }
  return sessionData.session?.provider_token
}

export const getGithubUser = async ({
  accessToken,
}: {
  accessToken: string
}) => {
  console.log("accessToken", accessToken)
  const octokit = new Octokit({ auth: accessToken })
  const githubUser = await octokit.request("GET /user", {
    headers: {
      "X-GitHub-Api-Version": "2022-11-28",
    },
  })
  console.log("githubUser", githubUser)
  return githubUser
}

export const getUserOrgs = async () => {
  try {
    const accessToken = await getGithubToken()
    if (!accessToken) {
      // throw new Error("Access token not found")
      return []
    }

    const octokit = new Octokit({ auth: accessToken })

    // Get authenticated user's organizations (includes private orgs if authorized)
    const { data: orgs } = await octokit.orgs.listForAuthenticatedUser({
      per_page: 100,
      headers: {
        "X-GitHub-Api-Version": "2022-11-28",
      },
    })

    const orgsWithInfo = await Promise.all(
      orgs.map(async (org) => {
        const orgDetails = await getOrgDetails(org.login)
        return { ...org, ...orgDetails }
      })
    )
    console.log("orgsWithInfo", orgsWithInfo)
    return orgsWithInfo as GithubOrg[]
  } catch (error) {
    console.error("Failed to fetch organizations:", error)
    throw error
  }
}

const getOrgDetails = async (orgName: string) => {
  try {
    const octokit = new Octokit({
      auth: process.env.GITHUB_TOKEN, // Use a valid token with appropriate permissions
    })

    const { data } = await octokit.request("GET /orgs/{org}", {
      org: orgName,
      headers: { "X-GitHub-Api-Version": "2022-11-28" },
    })

    const orgDetails = {
      logo: data.avatar_url, // Organization's avatar (logo)
      description: data.description, // Description (if available)
      url: data.blog || data.html_url, // Blog URL or GitHub URL
    }

    console.log("Organization Details:", orgDetails)
    return orgDetails
  } catch (error) {
    console.error("Error fetching organization details:", error)
    throw error
  }
}

export const removeGithubApp = async () => {
  try {
    const accessToken = await getGithubToken()
    if (!accessToken) {
      throw new Error("Access token not found")
    }

    // Revoke the access token using GitHub's OAuth revocation endpoint
    await fetch(
      "https://api.github.com/applications/settings/connections/applications",
      {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "X-GitHub-Api-Version": "2022-11-28",
          Accept: "application/vnd.github.v3+json",
        },
      }
    )

    // Also revoke the token server-side
    const basicAuth = Buffer.from(
      `${process.env.GITHUB_CLIENT_ID}:${process.env.GITHUB_CLIENT_SECRET}`
    ).toString("base64")

    await fetch(
      `https://api.github.com/applications/${process.env.GITHUB_CLIENT_ID}/token`,
      {
        method: "DELETE",
        headers: {
          Authorization: `Basic ${basicAuth}`,
          "X-GitHub-Api-Version": "2022-11-28",
          Accept: "application/vnd.github.v3+json",
        },
        body: JSON.stringify({ access_token: accessToken }),
      }
    )

    // Redirect to GitHub's revocation page
    const supabase = await createClient()
    await supabase.auth.signOut()
    redirect(
      `https://github.com/settings/connections/applications/${process.env.GITHUB_CLIENT_ID}`
    )
  } catch (error) {
    console.error("Error revoking GitHub OAuth authorization:", error)
    throw error
  }
}
